p: Project = input;

proj: output top(50) of string weight int;
methods : array of string;
patt_len := 7;
m := {"Sequential", "Dense", "Activation", "Conv2d", "BatchNorm2d",
      "ReLU", "Dropout", "Sigmoid", "Linear", "Flatten", "Reshape",
      "MaxPooling2D", "predict", "PReLU"};

visit(p, visitor {	
	before n: CodeRepository -> {
		snapshot := getsnapshot(n);
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	
	before node: Namespace -> {
		methods = new(methods, patt_len, "");
    }
	
	before ex: Expression -> {
	    isML := false;
	    patt := "";
		if (ex.kind != ExpressionKind.METHODCALL)
			stop;
		
		sig := ex.method;		
		for(i := 0; i < len(methods); i++) {
			if(i == len(methods) - 1) 
				methods[i] = sig;
			else 
				methods[i] = methods[i+1];
		}
	
		foreach(i : int; def(methods[i])) {
			if(methods[i] == "") 
				stop;
			exists (j: int; m[j] == methods[i])
	            isML = true;
	        patt += methods[i] + ", " ;
		}
		if(isML)
		    proj << patt weight 1;
	}
});